version: '3.8'

services:
  mysql_db:
    image: mysql:8.0
    container_name: robopost_mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - robopost_net

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: robopost_rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    networks:
      - robopost_net

  api_gateway:
    build:
      context: ./services/api_gateway
    container_name: robopost_api_gateway
    restart: always
    env_file:
      - ./services/api_gateway/.env
    ports:
      - "8000:8000"
    depends_on:
      - mysql_db
    networks:
      - robopost_net

  source_fetcher:
    build:
      context: ./services/source_fetcher
    container_name: robopost_source_fetcher
    restart: always
    env_file:
      - ./services/source_fetcher/.env
    depends_on:
      - mysql_db
      - rabbitmq
    networks:
      - robopost_net

  core_engine:
    build:
      context: ./services/core_engine
    container_name: robopost_core_engine
    restart: always
    env_file:
      - ./services/core_engine/.env
    depends_on:
      - mysql_db
      - rabbitmq
    networks:
      - robopost_net
    # For scaling: docker-compose up --scale core_engine=3

  telegram_bot:
    build:
      context: ./services/telegram_bot
    container_name: robopost_telegram_bot
    restart: always
    env_file:
      - ./services/telegram_bot/.env
    depends_on:
      - mysql_db
      - rabbitmq
    networks:
      - robopost_net
      
  publisher_service:
    build:
      context: ./services/publisher_service
    container_name: robopost_publisher_service
    restart: always
    command: celery -A app.celery_app.celery worker -l info
    env_file:
      - ./services/publisher_service/.env
    depends_on:
      - mysql_db
      - rabbitmq
    networks:
      - robopost_net
    # For scaling: docker-compose up --scale publisher_service=3

volumes:
  mysql_data:

networks:
  robopost_net:
    driver: bridge